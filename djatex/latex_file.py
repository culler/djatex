import os, tempfile
from subprocess import run, PIPE

class LaTeXFile:
    """
    An object which holds LaTeX and, optionally, bibtex source strings.  Its
    compile method creates a byte sequence containing a pdf rendering of the
    LaTeX source, as well as strings containing the pdflatex and bibtex logs.
    These are generated by running pdflatex and bibtex in a temporary directory
    which is removed once the results are copied into the LaTeXFile object.
    """
    rerun = b'Rerun to get cross-references right.'
    latex_args = ['pdflatex', '-file-line-error', '-halt-on-error', 'source']
    
    def __init__(self, latex_source, bibtex_source=None):
        self.result = self.bib_result = None
        self.latex_source = latex_source
        if isinstance(latex_source, str):
            self.latex_source = self.latex_source.encode('utf8')
        elif not isinstance(latex_source, bytes):
            raise ValueError('the LaTeX source must be of type str or bytes.')
        self.bibtex_source = bibtex_source
        if bibtex_source is None:
            return
        elif isinstance(bibtex_source, str):
            self.bibtex_source = bibtex_source.encode('utf8')
        elif not isinstance(bibtex_source, bytes):
            raise ValueError('The bibtex source must be of type str or bytes.')
        
    def compile(self):
        with tempfile.TemporaryDirectory(prefix='renderLaTeX') as tempdir:
            tex_path = os.path.join(tempdir, 'source.tex')
            bibtex_path = os.path.join(tempdir, 'source.bib')
            log_path = os.path.join(tempdir, 'source.log')
            pdf_path = os.path.join(tempdir, 'source.pdf')
            with open(tex_path, 'wb') as output:
                output.write(self.latex_source)
            result = run(self.latex_args, cwd=tempdir, timeout=30,
                         stdout=PIPE, stderr=PIPE)
            if result.returncode == 0 and self.bibtex_source:
                with open(bibtex_path, 'wb') as output:
                    output.write(self.bibtex_source)
                self.bib_result = run(['bibtex', 'source'], cwd=tempdir, timeout=30,
                                      stdout=PIPE, stderr=PIPE)
                result = run(self.latex_args, cwd=tempdir, timeout=30,
                             stdout=PIPE, stderr=PIPE)
            if result.returncode == 0 and result.stdout.find(self.rerun) >= 0:
                result = run(self.latex_args, cwd=tempdir, timeout=30,
                             stdout=PIPE, stderr=PIPE)
            self.result = result
            with open(log_path, 'r') as log:
                self.log = log.read()
            if result.returncode == 0:
                with open(pdf_path, 'rb') as pdf:
                    self.pdf = pdf.read()
            else:
                self.pdf = None

    def errors(self):
        error_dict = {}
        if self.result and self.result.returncode:
            error_dict['pdflatex'] = self.result.stdout
        if self.bib_result and self.bib_result.returncode:
            error_dict['bibtex'] = self.bib_result.stdout
        return error_dict

test_latex = r"""
\documentclass[11pt]{article}
\usepackage{cite}

\begin{document}

\title{My Article}
\author{Nobody Jr.}
\date{Today}
\maketitle

Blablabla said Nobody ~\cite{Nobody06}.

$$X = X$$

\bibliography{source}{}
\bibliographystyle{plain}
\end{document}
"""
test_bibtex = r"""
@misc{ Nobody06,
       author = "Nobody Jr",
       title = "My Article",
       year = "2006" }
"""
